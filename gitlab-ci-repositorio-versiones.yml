stages:
  - recopilar
  - deploy

recopilar_zips:
  stage: recopilar
  image: ubuntu:latest
  tags:
    - listener
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
  before_script:
    - apt update && apt install -y curl unzip python3
  script:
    - echo "Recopilando artefactos..."
    - mkdir -p artefactos
    - |
      proyectos=("repositorio-simple/repositorio-simple-simulador" "repositorio-simple/repositorio-simple-integracion" "repositorio-multiple/repositorio-multiple-simulador" "repositorio-multiple/repositorio-multiple-integracion")
      fecha=$(date +%F)

      for proyecto in "${proyectos[@]}"; do
        echo "Buscando último pipeline con artefactos en $proyecto..."
        project_encoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('repositorio/$proyecto', safe=''))")

        # Obtener el ID del último pipeline
        pipeline_id=""
        pipeline_id_raw=$(curl -s --header "PRIVATE-TOKEN: $API_ACCESS_TOKEN" "http://<GITLAB_URL>/api/v4/projects/$project_encoded/pipelines?ref=main&per_page=1")
        if echo "$pipeline_id_raw" | grep -q '"id":'; then
          pipeline_id=$(echo "$pipeline_id_raw" | grep -o '"id":[0-9]*' | head -n1 | cut -d':' -f2)
        fi

        if [ -z "$pipeline_id" ]; then
          echo "No se encontró pipeline en $proyecto"
          continue
        fi

        job_id=$(curl -s --header "PRIVATE-TOKEN: $API_ACCESS_TOKEN" \
          "http://<GITLAB_URL>/api/v4/projects/$project_encoded/pipelines/$pipeline_id/jobs" | \
          grep -o '{[^}]*"name":"build_zip"[^}]*}' | \
          grep '"status":"success"' | \
          grep -o '"id":[0-9]*' | head -n1 | grep -o '[0-9]*')


        if [ -z "$job_id" ]; then
          echo "No se encontró job con artefactos en $proyecto"
          continue
        fi

        echo "Descargando artefactos de $proyecto (job $job_id)..."
        mkdir -p "artefactos/$proyecto"
        curl --header "PRIVATE-TOKEN: $API_ACCESS_TOKEN" "http://<GITLAB_URL>/api/v4/projects/$project_encoded/jobs/$job_id/artifacts" --output "artefactos/$proyecto/artifacts.zip"

        unzip -o "artefactos/$proyecto/artifacts.zip" -d "artefactos/$proyecto/"
        rm "artefactos/$proyecto/artifacts.zip"

        # Añadir la fecha al nombre de cada archivo .zip encontrado dentro de artefactos/$proyecto/
        find . -type f -name "*.zip" | while read -r f; do
          base=$(basename "$f" .zip)
          dir=$(dirname "$f")
          mv "$f" "$dir/${base}_${fecha}.zip"
        done

      done

  artifacts:
    paths:
      - artefactos/
    expire_in: 1 hour

guardar_zip:
  stage: deploy
  tags:
    - commit
  variables:
    CI_USER: gitlab-ci-token
    CI_TOKEN: $CI_JOB_TOKEN 
  before_script:
    - apt update && apt install -y git
  script:
    - echo "Guardando los artefactos como commit..."
    - git config --global user.email "ci@example.com"
    - git config --global user.name "CI Bot"
    - git checkout main
    - git pull --no-rebase origin main
    - mkdir -p versiones/
    - find "artefactos/" -type f -name "*.zip" -exec cp {} "versiones/" \;
    - git add versiones/*.zip
    - git commit -m "Añadir ZIP generado desde CI para $proyecto" || echo "Nada que commitear"
    - git push http://oauth2:$CI_PUSH_TOKEN@URL/repositorio/versiones.git HEAD:main
  only:
    - main
  when: on_success
